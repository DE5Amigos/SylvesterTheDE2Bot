-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2838;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 09CD;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 81B5;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 8197;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 49DC;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 49D9;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 49D9;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 11CB;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 51CB;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 49DA;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 09CD;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           022 : B80A;  -- 	LOADI  10          ; 10ms * 10 = 0.1s rate, or 10Hz.
           023 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           024 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           025 : B80A;  -- 	loadi 	&H0A
           026 : C020;  -- 	movr 	r1, r0
           027 : B80B;  -- 	loadi	&H0B
           028 : 9804;  -- 	out 	sseg1
           029 : 8191;  -- 	call 	wait1
           02A : 8191;  -- 	call 	wait1
           02B : C001;  -- 	movr 	r0, r1
           02C : 9804;  -- 	out 	sseg1
           02D : 8191;  -- 	call 	wait1
           02E : 8191;  -- 	call 	wait1
           02F : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           030 : 09CD;  -- 	LOAD   Zero         ; Stop everything.
           031 : 9883;  -- 	OUT    LVELCMD
           032 : 988B;  -- 	OUT    RVELCMD
           033 : 98B2;  -- 	OUT    SONAREN
           034 : 0837;  -- 	LOAD   DEAD         ; An indication that we are dead
           035 : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           036 : 2836;  -- 	JUMP   Forever      ; Do this forever.
           037 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           038 : 803C;  -- 	CALL   ControlMovement
           039 : B000;  -- 	RETI   ; return from ISR
           03A : 0000;  -- DTheta:    DW 0
           03B : 0000;  -- DVel:      DW 0
           03C : 90C2;  -- 	IN     THETA
           03D : 203A;  -- 	SUB    DTheta      ; actual - desired angle
           03E : 8098;  -- 	CALL   Neg         ; desired - actual angle
           03F : 68B4;  -- 	ADDI   180
           040 : 8091;  -- 	CALL   Mod360
           041 : 6F4C;  -- 	ADDI   -180
           042 : 6002;  -- 	SHIFT  2
           043 : 104E;  -- 	STORE  CMAErr      ; hold temporarily
           044 : 083B;  -- 	LOAD   DVel
           045 : 184E;  -- 	ADD    CMAErr
           046 : 804F;  -- 	CALL   CapVel      ; ensure velocity is valid
           047 : 988B;  -- 	OUT    RVELCMD
           048 : 084E;  -- 	LOAD   CMAErr
           049 : 8098;  -- 	CALL   Neg         ; left wheel gets negative differential
           04A : 183B;  -- 	ADD    DVel
           04B : 804F;  -- 	CALL   CapVel
           04C : 9883;  -- 	OUT    LVELCMD
           04D : 8800;  -- 	RETURN
           04E : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           04F : 6E0C;  -- 	ADDI    -500
           050 : 3856;  -- 	JPOS    CapVelHigh
           051 : 69F4;  -- 	ADDI    500
           052 : 69F4;  -- 	ADDI    500
           053 : 3058;  -- 	JNEG    CapVelLow
           054 : 6E0C;  -- 	ADDI    -500
           055 : 8800;  -- 	RETURN
           056 : B9F4;  -- 	LOADI   500
           057 : 8800;  -- 	RETURN
           058 : BE0C;  -- 	LOADI   -500
           059 : 8800;  -- 	RETURN
           05A : 90C0;  -- 	IN XPOS		
           05B : 10FA;  -- 	STORE AtanX
           05C : 90C1;  -- 	IN YPOS
           05D : 10FB;  -- 	STORE AtanY
           05E : 809B;  -- 	CALL Atan2		; get the angle we need to turn to
           05F : 103A;  -- 	STORE DTheta
           060 : 90C2;  -- 	IN Theta
           061 : C120;  -- 	MOVR r9, r0		; load r9 with theta
           062 : 6FFF;  -- 	ADDI -1
           063 : C140;  -- 	MOVR r10, r0	; load r10 with desired angle -1 deg
           064 : 6802;  -- 	ADDI 2
           065 : C160;  -- 	MOVR r11, r0	; load r11 with angle +1 deg
           066 : E92A;  -- 	CMP r9, r10
           067 : 3869;  -- 	JPOS CheckH		; theta is larger than low range of desired angle
           068 : 2860;  -- 	JUMP TurnH	
           069 : E92B;  -- 	CMP r9, r11		
           06A : 306C;  -- 	JNEG DriveH		; theta is smaller than high range of desired angle
           06B : 2860;  -- 	JUMP TurnH
           06C : BE0C;  -- 	LOADI -500		; reverse at fast speed
           06D : 103B;  -- 	STORE DVel
           06E : 90C0;  -- 	IN XPOS			; check x pos
           06F : 6E0C;  -- 	ADDI -500		; home base
           070 : 386C;  -- 	JPOS DriveH		; keep driving if not home
           071 : 90C1;  -- 	IN YPOS			; check y pos
           072 : 6E0C;  -- 	ADDI -500		; home base
           073 : 386C;  -- 	JPOS DriveH		; keep driving if not home
           074 : B800;  -- 	LOADI 0
           075 : 103B;  -- 	STORE DVel		; stop
           076 : 8800;  -- 	return
           077 : B801;  -- 	LOADI 1
           078 : 11F2;  -- 	STORE index
           079 : C044;  -- 	MOVR r2, r4
           07A : E8A2;  -- 	CMP r5, r2
           07B : 387F;  -- 	JPOS prt1
           07C : C045;  -- 	MOVR r2, r5
           07D : B802;  -- 	LOADI 2
           07E : 11F2;  -- 	STORE index
           07F : E8C2;  -- 	CMP r6, r2
           080 : 3884;  -- 	JPOS prt2
           081 : C046;  -- 	MOVR r2, r6
           082 : B803;  -- 	LOADI 3
           083 : 11F2;  -- 	STORE index
           084 : E8E2;  -- 	CMP r7, r2
           085 : 3889;  -- 	JPOS prt3
           086 : C047;  -- 	MOVR r2, r7
           087 : B804;  -- 	LOADI 4
           088 : 11F2;  -- 	STORE index
           089 : 09F2;  -- 	LOAD index
           08A : C020;  -- 	MOVR r1, r0
           08B : 8800;  -- 	return
           08C : C044;  -- 	movr 	r2, r4 				; Assume r4 is min to start with.
           08D : E885;  -- 	cmp 	r4, r5				; Is r4 < r5
           08E : 3090;  -- 	jneg 	MinimumOfTwoEnd 	; Jump to end if r4 is the min.
           08F : C045;  -- 	movr 	r2, r5 				; Set r2 to r5 since that is min (or equal).
           090 : 8800;  -- 	return
           091 : 3094;  -- 	JNEG   M360N
           092 : 6E98;  -- 	ADDI   -360
           093 : 2891;  -- 	JUMP   Mod360
           094 : 6968;  -- 	ADDI   360
           095 : 3094;  -- 	JNEG   M360N
           096 : 8800;  -- 	RETURN
           097 : 389A;  -- 	JPOS   Abs_r
           098 : 59CC;  -- 	XOR    NegOne       ; Flip all bits
           099 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           09A : 8800;  -- 	RETURN
           09B : 08FB;  -- 	LOAD   AtanY
           09C : 8097;  -- 	CALL   Abs          ; abs(y)
           09D : 10FD;  -- 	STORE  AtanT
           09E : 08FA;  -- 	LOAD   AtanX        ; abs(x)
           09F : 8097;  -- 	CALL   Abs
           0A0 : 20FD;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0A1 : 30AC;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0A2 : 08FA;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0A3 : 30A9;  -- 	JNEG   A2_R3
           0A4 : 80BB;  -- 	CALL   A2_calc      ; Octants 1, 8
           0A5 : 30A7;  -- 	JNEG   A2_R1n
           0A6 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0A7 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0A8 : 8800;  -- 	RETURN
           0A9 : 80BB;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0AA : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0AB : 8800;  -- 	RETURN
           0AC : 08FB;  -- 	LOAD   AtanY        ; Swap input arguments
           0AD : 10FD;  -- 	STORE  AtanT
           0AE : 08FA;  -- 	LOAD   AtanX
           0AF : 10FB;  -- 	STORE  AtanY
           0B0 : 08FD;  -- 	LOAD   AtanT
           0B1 : 10FA;  -- 	STORE  AtanX
           0B2 : 38B7;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0B3 : 80BB;  -- 	CALL   A2_calc      ; else octants 6, 7
           0B4 : 8098;  -- 	CALL   Neg          ; Negatge the number
           0B5 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0B6 : 8800;  -- 	RETURN
           0B7 : 80BB;  -- 	CALL   A2_calc      ; Octants 2, 3
           0B8 : 8098;  -- 	CALL   Neg          ; negate the angle
           0B9 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0BA : 8800;  -- 	RETURN
           0BB : 08FB;  -- 	LOAD   AtanY
           0BC : 115A;  -- 	STORE  d16sN        ; Y in numerator
           0BD : 08FA;  -- 	LOAD   AtanX
           0BE : 115B;  -- 	STORE  d16sD        ; X in denominator
           0BF : 80E7;  -- 	CALL   A2_div       ; divide
           0C0 : 0960;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0C1 : 10FC;  -- 	STORE  AtanRatio
           0C2 : 1123;  -- 	STORE  m16sA
           0C3 : 1124;  -- 	STORE  m16sB
           0C4 : 80DE;  -- 	CALL   A2_mult      ; X^2
           0C5 : 1123;  -- 	STORE  m16sA
           0C6 : 08FE;  -- 	LOAD   A2c
           0C7 : 1124;  -- 	STORE  m16sB
           0C8 : 80DE;  -- 	CALL   A2_mult
           0C9 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           0CA : 115B;  -- 	STORE  d16sD
           0CB : 08FC;  -- 	LOAD   AtanRatio
           0CC : 115A;  -- 	STORE  d16sN        ; Ratio in numerator
           0CD : 80E7;  -- 	CALL   A2_div       ; divide
           0CE : 0960;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0CF : 1123;  -- 	STORE  m16sA        ; <= result in radians
           0D0 : 08FF;  -- 	LOAD   A2cd         ; degree conversion factor
           0D1 : 1124;  -- 	STORE  m16sB
           0D2 : 80DE;  -- 	CALL   A2_mult      ; convert to degrees
           0D3 : 10FD;  -- 	STORE  AtanT
           0D4 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           0D5 : 49CE;  -- 	AND    One
           0D6 : 40DB;  -- 	JZERO  A2_rdwn      ; round down
           0D7 : 08FD;  -- 	LOAD   AtanT
           0D8 : 6018;  -- 	SHIFT  -8
           0D9 : 6801;  -- 	ADDI   1            ; round up
           0DA : 8800;  -- 	RETURN
           0DB : 08FD;  -- 	LOAD   AtanT
           0DC : 6018;  -- 	SHIFT  -8           ; round down
           0DD : 8800;  -- 	RETURN
           0DE : 8100;  -- 	CALL   Mult16s
           0DF : 0928;  -- 	LOAD   mres16sH
           0E0 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0E1 : 1128;  -- 	STORE  mres16sH
           0E2 : 0927;  -- 	LOAD   mres16sL
           0E3 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           0E4 : 49E0;  -- 	AND    LowByte
           0E5 : 5128;  -- 	OR     mres16sH     ; combine high and low words of result
           0E6 : 8800;  -- 	RETURN
           0E7 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           0E8 : 10FD;  -- 	STORE  AtanT
           0E9 : 08FD;  -- 	LOAD   AtanT
           0EA : 6FFF;  -- 	ADDI   -1
           0EB : 38EE;  -- 	JPOS   A2_DN        ; not done; continue shifting
           0EC : 8129;  -- 	CALL   Div16s       ; do the standard division
           0ED : 8800;  -- 	RETURN
           0EE : 10FD;  -- 	STORE  AtanT
           0EF : 095A;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           0F0 : 6001;  -- 	SHIFT  1
           0F1 : 595A;  -- 	XOR    d16sN        ; if the sign changed,
           0F2 : 30F6;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           0F3 : 595A;  -- 	XOR    d16sN        ; get back shifted version
           0F4 : 115A;  -- 	STORE  d16sN
           0F5 : 28E9;  -- 	JUMP   A2_DL
           0F6 : 095B;  -- 	LOAD   d16sD
           0F7 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           0F8 : 115B;  -- 	STORE  d16sD
           0F9 : 28E9;  -- 	JUMP   A2_DL
           0FA : 0000;  -- AtanX:      DW 0
           0FB : 0000;  -- AtanY:      DW 0
           0FC : 0000;  -- AtanRatio:  DW 0        ; =y/x
           0FD : 0000;  -- AtanT:      DW 0        ; temporary value
           0FE : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           0FF : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           100 : B800;  -- 	LOADI  0
           101 : 1125;  -- 	STORE  m16sc        ; clear carry
           102 : 1128;  -- 	STORE  mres16sH     ; clear result
           103 : B810;  -- 	LOADI  16           ; load 16 to counter
           104 : 1126;  -- 	STORE  mcnt16s      
           105 : 0925;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           106 : 410A;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           107 : 0928;  -- 	LOAD   mres16sH     ; if a carry, 
           108 : 1923;  -- 	ADD    m16sA        ;  add multiplicand to result H
           109 : 1128;  -- 	STORE  mres16sH
           10A : 0924;  -- 	LOAD   m16sB
           10B : 49CE;  -- 	AND    One          ; check bit 0 of multiplier
           10C : 1125;  -- 	STORE  m16sc        ; save as next carry
           10D : 4111;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           10E : 0928;  -- 	LOAD   mres16sH     ; if bit 0 set,
           10F : 2123;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           110 : 1128;  -- 	STORE  mres16sH
           111 : 0924;  -- 	LOAD   m16sB
           112 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           113 : 4922;  -- 	AND    c7FFF        ; clear msb
           114 : 1124;  -- 	STORE  m16sB
           115 : 0928;  -- 	LOAD   mres16sH     ; load result H
           116 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           117 : 5124;  -- 	OR     m16sB
           118 : 1124;  -- 	STORE  m16sB        ; result L now includes carry out from H
           119 : 0928;  -- 	LOAD   mres16sH
           11A : 6011;  -- 	SHIFT  -1
           11B : 1128;  -- 	STORE  mres16sH     ; shift result H >>1
           11C : 0926;  -- 	LOAD   mcnt16s
           11D : 6FFF;  -- 	ADDI   -1           ; check counter
           11E : 3904;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           11F : 0924;  -- 	LOAD   m16sB
           120 : 1127;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           121 : 8800;  -- 	RETURN              ; Done
           122 : 7FFF;  -- c7FFF: DW &H7FFF
           123 : 0000;  -- m16sA: DW 0 ; multiplicand
           124 : 0000;  -- m16sB: DW 0 ; multipler
           125 : 0000;  -- m16sc: DW 0 ; carry
           126 : 0000;  -- mcnt16s: DW 0 ; counter
           127 : 0000;  -- mres16sL: DW 0 ; result low
           128 : 0000;  -- mres16sH: DW 0 ; result high
           129 : B800;  -- 	LOADI  0
           12A : 1161;  -- 	STORE  dres16sR     ; clear remainder result
           12B : 115E;  -- 	STORE  d16sC1       ; clear carry
           12C : 095A;  -- 	LOAD   d16sN
           12D : 595B;  -- 	XOR    d16sD
           12E : 115C;  -- 	STORE  d16sS        ; sign determination = N XOR D
           12F : B811;  -- 	LOADI  17
           130 : 115D;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           131 : 095B;  -- 	LOAD   d16sD
           132 : 8097;  -- 	CALL   Abs          ; take absolute value of denominator
           133 : 115B;  -- 	STORE  d16sD
           134 : 095A;  -- 	LOAD   d16sN
           135 : 8097;  -- 	CALL   Abs          ; take absolute value of numerator
           136 : 115A;  -- 	STORE  d16sN
           137 : 095A;  -- 	LOAD   d16sN
           138 : 601F;  -- 	SHIFT  -15          ; get msb
           139 : 49CE;  -- 	AND    One          ; only msb (because shift is arithmetic)
           13A : 115F;  -- 	STORE  d16sC2       ; store as carry
           13B : 095A;  -- 	LOAD   d16sN
           13C : 6001;  -- 	SHIFT  1            ; shift <<1
           13D : 515E;  -- 	OR     d16sC1       ; with carry
           13E : 115A;  -- 	STORE  d16sN
           13F : 095D;  -- 	LOAD   d16sT
           140 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           141 : 4151;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           142 : 115D;  -- 	STORE  d16sT
           143 : 0961;  -- 	LOAD   dres16sR
           144 : 6001;  -- 	SHIFT  1            ; shift remainder
           145 : 515F;  -- 	OR     d16sC2       ; with carry from other shift
           146 : 215B;  -- 	SUB    d16sD        ; subtract denominator from remainder
           147 : 314C;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           148 : 1161;  -- 	STORE  dres16sR
           149 : B801;  -- 	LOADI  1
           14A : 115E;  -- 	STORE  d16sC1       ; set carry
           14B : 2937;  -- 	JUMP   Div16s_loop
           14C : 195B;  -- 	ADD    d16sD        ; add denominator back in
           14D : 1161;  -- 	STORE  dres16sR
           14E : B800;  -- 	LOADI  0
           14F : 115E;  -- 	STORE  d16sC1       ; clear carry
           150 : 2937;  -- 	JUMP   Div16s_loop
           151 : 095A;  -- 	LOAD   d16sN
           152 : 1160;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           153 : 095C;  -- 	LOAD   d16sS        ; check the sign indicator
           154 : 3156;  -- 	JNEG   Div16s_neg
           155 : 8800;  -- 	RETURN
           156 : 0960;  -- 	LOAD   dres16sQ     ; need to negate the result
           157 : 8098;  -- 	CALL   Neg
           158 : 1160;  -- 	STORE  dres16sQ
           159 : 8800;  -- 	RETURN	
           15A : 0000;  -- d16sN: DW 0 ; numerator
           15B : 0000;  -- d16sD: DW 0 ; denominator
           15C : 0000;  -- d16sS: DW 0 ; sign value
           15D : 0000;  -- d16sT: DW 0 ; temp counter
           15E : 0000;  -- d16sC1: DW 0 ; carry value
           15F : 0000;  -- d16sC2: DW 0 ; carry value
           160 : 0000;  -- dres16sQ: DW 0 ; quotient result
           161 : 0000;  -- dres16sR: DW 0 ; remainder result
           162 : 098C;  -- 	LOAD   L2X
           163 : 8097;  -- 	CALL   Abs
           164 : 118E;  -- 	STORE  L2T1
           165 : 098D;  -- 	LOAD   L2Y
           166 : 8097;  -- 	CALL   Abs
           167 : 218E;  -- 	SUB    L2T1
           168 : 3184;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           169 : 198E;  -- 	ADD    L2T1
           16A : 1123;  -- 	STORE  m16sa
           16B : B8F6;  -- 	LOADI  246       ; max * 246
           16C : 1124;  -- 	STORE  m16sB
           16D : 8100;  -- 	CALL   Mult16s
           16E : 0928;  -- 	LOAD   mres16sH
           16F : 6008;  -- 	SHIFT  8
           170 : 118F;  -- 	STORE  L2T2
           171 : 0927;  -- 	LOAD   mres16sL
           172 : 6018;  -- 	SHIFT  -8        ; / 256
           173 : 49E0;  -- 	AND    LowByte
           174 : 518F;  -- 	OR     L2T2
           175 : 1190;  -- 	STORE  L2T3
           176 : 098E;  -- 	LOAD   L2T1
           177 : 1123;  -- 	STORE  m16sa
           178 : B868;  -- 	LOADI  104       ; min * 104
           179 : 1124;  -- 	STORE  m16sB
           17A : 8100;  -- 	CALL   Mult16s
           17B : 0928;  -- 	LOAD   mres16sH
           17C : 6008;  -- 	SHIFT  8
           17D : 118F;  -- 	STORE  L2T2
           17E : 0927;  -- 	LOAD   mres16sL
           17F : 6018;  -- 	SHIFT  -8        ; / 256
           180 : 49E0;  -- 	AND    LowByte
           181 : 518F;  -- 	OR     L2T2
           182 : 1990;  -- 	ADD    L2T3     ; sum
           183 : 8800;  -- 	RETURN
           184 : 198E;  -- 	ADD    L2T1
           185 : 118F;  -- 	STORE  L2T2
           186 : 098E;  -- 	LOAD   L2T1
           187 : 1190;  -- 	STORE  L2T3
           188 : 098F;  -- 	LOAD   L2T2
           189 : 118E;  -- 	STORE  L2T1
           18A : 0990;  -- 	LOAD   L2T3
           18B : 296A;  -- 	JUMP   CalcDist
           18C : 0000;  -- L2X:  DW 0
           18D : 0000;  -- L2Y:  DW 0
           18E : 0000;  -- L2T1: DW 0
           18F : 0000;  -- L2T2: DW 0
           190 : 0000;  -- L2T3: DW 0
           191 : 9802;  -- 	OUT    TIMER
           192 : 9002;  -- 	IN     TIMER
           193 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           194 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           195 : 3192;  -- 	JNEG   Wloop
           196 : 8800;  -- 	RETURN
           197 : 81AF;  -- 	CALL   GetBattLvl
           198 : 4197;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           199 : 21EF;  -- 	SUB    MinBatt
           19A : 319D;  -- 	JNEG   DeadBatt
           19B : 19EF;  -- 	ADD    MinBatt     ; get original value back
           19C : 8800;  -- 	RETURN
           19D : B820;  -- 	LOADI  &H20
           19E : 980A;  -- 	OUT    BEEP        ; start beep sound
           19F : 81AF;  -- 	CALL   GetBattLvl  ; get the battery level
           1A0 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1A1 : 9805;  -- 	OUT    SSEG2
           1A2 : 9806;  -- 	OUT    LCD
           1A3 : 09CD;  -- 	LOAD   Zero
           1A4 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1A5 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1A6 : 9807;  -- 	OUT    XLEDS
           1A7 : 8191;  -- 	CALL   Wait1       ; 1 second
           1A8 : 09CD;  -- 	Load   Zero
           1A9 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1AA : 09CD;  -- 	LOAD   Zero
           1AB : 9801;  -- 	OUT    LEDS        ; LEDs off
           1AC : 9807;  -- 	OUT    XLEDS
           1AD : 8191;  -- 	CALL   Wait1       ; 1 second
           1AE : 299D;  -- 	JUMP   DeadBatt    ; repeat forever
           1AF : 09F1;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1B0 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1B1 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1B2 : 81BD;  -- 	CALL   BlockI2C    ; wait for it to finish
           1B3 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1B4 : 8800;  -- 	RETURN
           1B5 : 81BD;  -- 	CALL   BlockI2C    ; wait for idle
           1B6 : 09F0;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1B7 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1B8 : 09CD;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1B9 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1BA : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1BB : 81BD;  -- 	CALL   BlockI2C    ; wait for it to finish
           1BC : 8800;  -- 	RETURN
           1BD : 09CD;  -- 	LOAD   Zero
           1BE : 11CB;  -- 	STORE  Temp        ; Used to check for timeout
           1BF : 09CB;  -- 	LOAD   Temp
           1C0 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1C1 : 11CB;  -- 	STORE  Temp
           1C2 : 41C6;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1C3 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1C4 : 39BF;  -- 	JPOS   BI2CL       ; If not 0, try again
           1C5 : 8800;  -- 	RETURN             ; Else return
           1C6 : 09CD;  -- 	LOAD   Zero
           1C7 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1C8 : 9804;  -- 	OUT    SSEG1
           1C9 : 9805;  -- 	OUT    SSEG2       ; display error message
           1CA : 29C6;  -- 	JUMP   I2CError
           1CB : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           1CC : FFFF;  -- NegOne:   DW -1
           1CD : 0000;  -- Zero:     DW 0
           1CE : 0001;  -- One:      DW 1
           1CF : 0002;  -- Two:      DW 2
           1D0 : 0003;  -- Three:    DW 3
           1D1 : 0004;  -- Four:     DW 4
           1D2 : 0005;  -- Five:     DW 5
           1D3 : 0006;  -- Six:      DW 6
           1D4 : 0007;  -- Seven:    DW 7
           1D5 : 0008;  -- Eight:    DW 8
           1D6 : 0009;  -- Nine:     DW 9
           1D7 : 000A;  -- Ten:      DW 10
           1D8 : 0001;  -- Mask0:    DW &B00000001
           1D9 : 0002;  -- Mask1:    DW &B00000010
           1DA : 0004;  -- Mask2:    DW &B00000100
           1DB : 0008;  -- Mask3:    DW &B00001000
           1DC : 0010;  -- Mask4:    DW &B00010000
           1DD : 0020;  -- Mask5:    DW &B00100000
           1DE : 0040;  -- Mask6:    DW &B01000000
           1DF : 0080;  -- Mask7:    DW &B10000000
           1E0 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1E1 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1E2 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1E3 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1E4 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           1E5 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1E6 : 00B4;  -- Deg180:   DW 180       ; 180
           1E7 : 010E;  -- Deg270:   DW 270       ; 270
           1E8 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1E9 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1EA : FF9C;  -- RSlow:    DW -100
           1EB : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1EC : FEA2;  -- RMid:     DW -350
           1ED : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1EE : FE0C;  -- RFast:    DW -500
           1EF : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1F0 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1F1 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           1F2 : 0000;  -- index: DW 0
  END;
