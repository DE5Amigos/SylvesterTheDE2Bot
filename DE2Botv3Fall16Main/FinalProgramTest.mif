-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28E0;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A4F;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00A : 8237;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 8219;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00E : 4A5E;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           011 : 4A5B;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           013 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  -- 	JUMP   WaitForSafety
           015 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           016 : 4A5B;  -- 	AND    Mask1
           017 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           018 : 124D;  -- 	STORE  Temp        ; (overkill, but looks nice)
           019 : 6001;  -- 	SHIFT  1
           01A : 524D;  -- 	OR     Temp
           01B : 9807;  -- 	OUT    XLEDS
           01C : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01D : 4A5C;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01F : 0A4F;  -- 	LOAD   Zero
           020 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           021 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           022 : 0A68;  -- 	LOAD Deg45
           023 : 98C2;  -- 	OUT	THETA
           024 : B80A;  -- 	LOADI  10          ; 10ms * 10 = 0.1s rate, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : 0A5C;  -- 	LOAD   Mask2
           028 : 525D;  -- 	OR     Mask3       ; AC now contains 0b01100
           029 : 98B2;  -- 	OUT    SONAREN     ; enable front-facing sensors
           02A : 90AA;  -- 	IN     DIST2       ; get value from sensor 2
           02B : 6D9E;  -- 	ADDI   -610        ; about 2ft
           02C : 303B;  -- 	JNEG   ReturnHome5         ; routine to immediately stop the robot
           02D : 90AB;  -- 	IN     DIST3
           02E : 6D9E;  -- 	ADDI   -610        ; about 2ft
           02F : 303B;  -- 	JNEG   ReturnHome5         ; routine to immediately stop the robot
           030 : 90C0;  -- 	IN     XPOS
           031 : 2266;  -- 	SUB    TwoFeet     ; just using because it was already defined
           032 : 2266;  -- 	SUB    TwoFeet
           033 : 383B;  -- 	JPOS   ReturnHome5
           034 : 0A71;  -- 	LOAD   FFast        ; defined below
           035 : 9883;  -- 	OUT    LVELCMD     ; send velocity to left and right wheels
           036 : 0A6F;  -- 	LOAD   FMid
           037 : 988B;  -- 	OUT    RVELCMD
           038 : 90C2;  -- 	IN THETA
           039 : 9805;  -- 	OUT SSEG2
           03A : 282A;  -- 	JUMP   SimpleTask
           03B : 2850;  -- 	JUMP Rev
           03C : 90C0;  -- 	IN XPOS		
           03D : 117C;  -- 	STORE AtanX
           03E : 90C1;  -- 	IN YPOS
           03F : 117D;  -- 	STORE AtanY
           040 : 811D;  -- 	CALL Atan2		; get the angle we need to turn to
           041 : 10E2;  -- 	STORE DTheta
           042 : 9804;  -- 	OUT SSEG1
           043 : 90C2;  -- 	IN Theta
           044 : 9805;  -- 	OUT SSEG2
           045 : C120;  -- 	MOVR r9, r0		; load r9 with theta
           046 : 6FFD;  -- 	ADDI -3
           047 : C140;  -- 	MOVR r10, r0	; load r10 with desired angle -2 deg
           048 : 6806;  -- 	ADDI 6
           049 : C160;  -- 	MOVR r11, r0	; load r11 with angle +2 deg
           04A : E92A;  -- 	CMP r9, r10
           04B : 384D;  -- 	JPOS CheckH		; theta is larger than low range of desired angle
           04C : 2843;  -- 	JUMP TurnH	
           04D : E92B;  -- 	CMP r9, r11		
           04E : 3050;  -- 	JNEG Rev		; theta is smaller than high range of desired angle
           04F : 2843;  -- 	JUMP TurnH
           050 : 0A61;  -- 	LOAD Mask7
           051 : 5260;  -- 	OR	 Mask6
           052 : 98B2;  -- 	OUT  SONAREN
           053 : 0A70;  -- 	LOAD RMid
           054 : 9883;  -- 	OUT	LVelCmd
           055 : 988B;  -- 	OUT RVelCmd
           056 : 90AE;  -- 	IN Dist6
           057 : 124D;  -- 	STORE Temp
           058 : 2267;  -- 	SUB	OneFoot
           059 : 305E;  -- 	JNEG Rev2		; Sonar 6 is within good range
           05A : 90AF;  -- 	IN Dist7
           05B : 2267;  -- 	SUB	OneFoot
           05C : 3067;  -- 	JNEG Rev3		; Sonar 7 is within good range
           05D : 2853;  -- 	JUMP Rev1
           05E : 0A4F;  -- 	LOAD ZERO
           05F : 988B;  -- 	OUT RVelCmd
           060 : 90C2;  -- 	IN THETA
           061 : 2269;  -- 	SUB Deg90
           062 : 305E;  -- 	JNEG Rev2			
           063 : 90AF;  -- 	IN Dist7
           064 : 2267;  -- 	SUB	OneFoot
           065 : 3070;  -- 	JNEG Home	;Y-coordinates are good too, start from the top
           066 : 2863;  -- 	Jump Rev25
           067 : 90AE;  -- 	IN Dist6
           068 : 2267;  -- 	SUB	OneFoot
           069 : 3070;  -- 	JNEG Home	;X-coordinates are good too, start from the top
           06A : 0A69;  -- 	LOAD Deg90
           06B : 10E2;  -- 	STORE DTheta
           06C : 0A70;  -- 	LOAD RMid
           06D : 10E3;  -- 	STORE DVel
           06E : 80E4;  -- 	CALL ControlMovement
           06F : 2867;  -- 	JUMP Rev3	; Keeps going until Dist6 is within One Foot
           070 : 28D7;  -- 	Jump Die
           071 : 0A6E;  -- 	LOAD RSlow
           072 : 988B;  -- 	OUT RVelCmd
           073 : 0A6D;  -- 	LOAD FSlow
           074 : 9883;  -- 	OUT	LVelCmd
           075 : 08C2;  -- 	LOAD THETA
           076 : 224D;  -- 	SUB Temp
           077 : 3050;  -- 	JNEG Rev
           078 : 2871;  -- 	JUMP RevCW
           079 : 0A6E;  -- 	LOAD RSlow
           07A : 9883;  -- 	OUT	LVelCmd
           07B : 0A6D;  -- 	LOAD FSlow
           07C : 988B;  -- 	OUT RVelCmd
           07D : 08C2;  -- 	LOAD THETA
           07E : 224D;  -- 	SUB	Temp
           07F : 3050;  -- 	JNEG Rev
           080 : 2879;  -- 	JUMP RevCCW
           081 : B800;  -- 	LOADI  0
           082 : 10E3;  -- 	STORE  DVel       ; desired forward velocity
           083 : B82D;  -- 	LOADI  45
           084 : 10E2;  -- 	STORE DTheta
           085 : 90C2;  -- 	IN Theta
           086 : 9804;  -- 	OUT SSEG1
           087 : 6FD8;  -- 	ADDI -40
           088 : 3081;  -- 	JNEG Turn45
           089 : 90A9;  -- 	IN Dist1
           08A : C080;  -- 	MOVR r4, r0
           08B : 90AA;  -- 	IN Dist2
           08C : C0A0;  -- 	MOVR r5, r0
           08D : 90AB;  -- 	IN Dist3
           08E : C0C0;  -- 	MOVR r6, r0
           08F : 90AC;  -- 	IN Dist4
           090 : C0E0;  -- 	MOVR r7, r0
           091 : 810B;  -- 	CALL MinimumOfFour
           092 : C001;  -- 	MOVR r0, r1		; puts r1 in acc
           093 : 6FFF;  -- 	ADDI -1			; is the min sensor #1?
           094 : 4098;  -- 	JZERO TurnL		; we need to turn left to face it
           095 : C001;  -- 	MOVR r0, r1		; puts r1 in acc
           096 : 6FFC;  -- 	ADDI -4			; is the min sensor #4?
           097 : 40A5;  -- 	JZERO TurnR		; we need to turn right to face it
           098 : B800;  -- 	LOADI 0
           099 : 10E3;  -- 	STORE DVel		; desired forward velocity
           09A : 90C2;  -- 	IN Theta		; current angle
           09B : 6803;  -- 	ADDI 3			; move 3 at a time
           09C : 98E2;  -- 	OUT DTheta		; turn left
           09D : C002;  -- 	MOVR r0, r2		; bring r2 (min distance) into acc 
           09E : 6832;  -- 	ADDI 50			; add some constant for error
           09F : C060;  -- 	MOVR r3, r0 	; put r2 + some constant into r3
           0A0 : 90AB;  -- 	IN Dist3		; check sensor 3
           0A1 : C080;  -- 	MOVR r4, r0		; put it into r4
           0A2 : E883;  -- 	CMP r4, r3		; compare reading from sensor 3 with min distance (+ error tolerance)
           0A3 : 30B2;  -- 	JNEG Move		; reading is closer than min distance, we can move forward now
           0A4 : 2898;  -- 	JUMP TurnL		; reading is further than min distance, keep turning
           0A5 : B800;  -- 	LOADI 0
           0A6 : 10E3;  -- 	STORE DVel      ; desired forward velocity
           0A7 : 90C2;  -- 	IN Theta		; current angle
           0A8 : 6FFD;  -- 	ADDI -3			; move 3 at a time
           0A9 : 98E2;  -- 	OUT DTheta		; turn right
           0AA : C002;  -- 	MOVR r0, r2		; bring r2 (min distance) into acc 
           0AB : 6832;  -- 	ADDI 50			; add some constant for error
           0AC : C060;  -- 	MOVR r3, r0 	; put r2 + some constant into r3
           0AD : 90AA;  -- 	IN Dist2		; check sensor 2
           0AE : C080;  -- 	MOVR r4, r0		; put it into r4
           0AF : E883;  -- 	CMP r4, r3		; compare reading from sensor 2 with min distance (+ error tolerance)
           0B0 : 30B2;  -- 	JNEG Move		; reading is closer than min distance, we can move forward now
           0B1 : 28A5;  -- 	JUMP TurnR		; reading is further than min distance, keep turning
           0B2 : B9F4;  -- 	LOADI 500
           0B3 : 10E3;  -- 	STORE DVel		; move forward fast.
           0B4 : B8C8;  -- 	LOADI 200		;put some minimum allowed distance (touching object) into r6
           0B5 : C0C0;  -- 	MOVR r6, r0
           0B6 : 90AA;  -- 	IN Dist2
           0B7 : C080;  -- 	MOVR r4, r0		; put in r4
           0B8 : 90AB;  -- 	IN Dist3
           0B9 : C0A0;  -- 	MOVR r5, r0		; put in r5
           0BA : E886;  -- 	CMP r4, r6		; Check to see if sensor 2 sees that the object as been reached
           0BB : 30D3;  -- 	JNEG Found
           0BC : E8A6;  -- 	CMP r5, r6		; Check to see if sensor 3 sees that the object has been reached
           0BD : 30D3;  -- 	JNEG Found
           0BE : E885;  -- 	CMP r4, r5		; r4 still contains the error adjusted min value
           0BF : 30C5;  -- 	JNEG VeerL		; sensor 2 sees object
           0C0 : 38CC;  -- 	JPOS VeerR		; sensor 3 sees object
           0C1 : 90AA;  -- 	IN Dist2		; sensors 2 and 3 had the object in sight
           0C2 : 6805;  -- 	ADDI 5			; adjust for error
           0C3 : C060;  -- 	MOVR r3, r0		; update distance to target
           0C4 : 28B2;  -- 	JUMP Move		; both see object, just go forward
           0C5 : 90AA;  -- 	IN Dist2		; sensor 2 had the object in sight
           0C6 : 6832;  -- 	ADDI 50			; adjust for error
           0C7 : C060;  -- 	MOVR r3, r0		; update distance to target
           0C8 : 90C2;  -- 	IN Theta		; current angle
           0C9 : 6801;  -- 	ADDI 1			; move 1 at a time
           0CA : 98E2;  -- 	OUT DTheta		; update angle
           0CB : 28B2;  -- 	JUMP Move		; continue moving
           0CC : 90AB;  -- 	IN Dist3		; sensor 3 had the object in sight
           0CD : 6832;  -- 	ADDI 50			; adjust for error
           0CE : C060;  -- 	MOVR r3, r0		; update distance to target
           0CF : 90C2;  -- 	IN Theta		; current angle
           0D0 : 6FFF;  -- 	ADDI -1			; move 1 at a time
           0D1 : 98E2;  -- 	OUT DTheta		; update angle
           0D2 : 28B2;  -- 	JUMP Move		; continue moving
           0D3 : B800;  -- 	LOADI 0
           0D4 : 10E3;  -- 	STORE DVel		; stop moving
           0D5 : 803B;  -- 	CALL ReturnHome5
           0D6 : 2815;  -- 	JUMP WaitForUser
           0D7 : A00F;  -- 	CLI    &B1111       ; disable all interrupts
           0D8 : 0A4F;  -- 	LOAD   Zero         ; Stop everything.
           0D9 : 9883;  -- 	OUT    LVELCMD
           0DA : 988B;  -- 	OUT    RVELCMD
           0DB : 98B2;  -- 	OUT    SONAREN
           0DC : 08DF;  -- 	LOAD   DEAD         ; An indication that we are dead
           0DD : 9805;  -- 	OUT    SSEG2        ; "dEAd" on the LEDs
           0DE : 28DE;  -- 	JUMP   Forever      ; Do this forever.
           0DF : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           0E0 : 80E4;  -- 	CALL   ControlMovement
           0E1 : B000;  -- 	RETI   ; return from ISR
           0E2 : 0000;  -- DTheta:    DW 0
           0E3 : 0000;  -- DVel:      DW 0
           0E4 : 90C2;  -- 	IN     THETA
           0E5 : 20E2;  -- 	SUB    DTheta      ; actual - desired angle
           0E6 : 811A;  -- 	CALL   Neg         ; desired - actual angle
           0E7 : 68B4;  -- 	ADDI   180
           0E8 : 8113;  -- 	CALL   Mod360
           0E9 : 6F4C;  -- 	ADDI   -180
           0EA : 6002;  -- 	SHIFT  2
           0EB : 10F6;  -- 	STORE  CMAErr      ; hold temporarily
           0EC : 08E3;  -- 	LOAD   DVel
           0ED : 18F6;  -- 	ADD    CMAErr
           0EE : 80F7;  -- 	CALL   CapVel      ; ensure velocity is valid
           0EF : 988B;  -- 	OUT    RVELCMD
           0F0 : 08F6;  -- 	LOAD   CMAErr
           0F1 : 811A;  -- 	CALL   Neg         ; left wheel gets negative differential
           0F2 : 18E3;  -- 	ADD    DVel
           0F3 : 80F7;  -- 	CALL   CapVel
           0F4 : 9883;  -- 	OUT    LVELCMD
           0F5 : 8800;  -- 	RETURN
           0F6 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0F7 : 6E0C;  -- 	ADDI    -500
           0F8 : 38FE;  -- 	JPOS    CapVelHigh
           0F9 : 69F4;  -- 	ADDI    500
           0FA : 69F4;  -- 	ADDI    500
           0FB : 3100;  -- 	JNEG    CapVelLow
           0FC : 6E0C;  -- 	ADDI    -500
           0FD : 8800;  -- 	RETURN
           0FE : B9F4;  -- 	LOADI   500
           0FF : 8800;  -- 	RETURN
           100 : BE0C;  -- 	LOADI   -500
           101 : 8800;  -- 	RETURN
           102 : C044;  -- 	movr 	r2, r4 				; Assume r4 is min to start with.
           103 : B801;  -- 	loadi	1
           104 : C020;  -- 	movr	r1, r0
           105 : E885;  -- 	cmp 	r4, r5				; Is r4 < r5
           106 : 310A;  -- 	jneg 	MinimumOfTwoEnd 	; Jump to end if r4 is the min.
           107 : C045;  -- 	movr 	r2, r5 				; Set r2 to r5 since that is min (or equal).
           108 : B802;  -- 	loadi	2
           109 : C020;  -- 	movr	r1, r0
           10A : 8800;  -- 	return
           10B : 8102;  -- 	call 	MinimumOfTwo 	; Will place the min{r4, r5} in r2.
           10C : C082;  -- 	movr 	r4, r2 			; Move the new min to the input r4.
           10D : C0A6;  -- 	movr 	r5, r6 			; Move the next test value to input r5.
           10E : 8102;  -- 	call 	MinimumOfTwo 	; Will place min{r4, r5, r6} into r2.
           10F : C082;  -- 	movr 	r4, r2
           110 : C0A7;  -- 	movr 	r5, r7 
           111 : 8102;  -- 	call 	MinimumOfTwo 	; r2 will contain proper return value.
           112 : 8800;  -- 	return				; Finished
           113 : 3116;  -- 	JNEG   M360N
           114 : 6E98;  -- 	ADDI   -360
           115 : 2913;  -- 	JUMP   Mod360
           116 : 6968;  -- 	ADDI   360
           117 : 3116;  -- 	JNEG   M360N
           118 : 8800;  -- 	RETURN
           119 : 391C;  -- 	JPOS   Abs_r
           11A : 5A4E;  -- 	XOR    NegOne       ; Flip all bits
           11B : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           11C : 8800;  -- 	RETURN
           11D : 097D;  -- 	LOAD   AtanY
           11E : 8119;  -- 	CALL   Abs          ; abs(y)
           11F : 117F;  -- 	STORE  AtanT
           120 : 097C;  -- 	LOAD   AtanX        ; abs(x)
           121 : 8119;  -- 	CALL   Abs
           122 : 217F;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           123 : 312E;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           124 : 097C;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           125 : 312B;  -- 	JNEG   A2_R3
           126 : 813D;  -- 	CALL   A2_calc      ; Octants 1, 8
           127 : 3129;  -- 	JNEG   A2_R1n
           128 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           129 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           12A : 8800;  -- 	RETURN
           12B : 813D;  -- 	CALL   A2_calc      ; Octants 4, 5            
           12C : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           12D : 8800;  -- 	RETURN
           12E : 097D;  -- 	LOAD   AtanY        ; Swap input arguments
           12F : 117F;  -- 	STORE  AtanT
           130 : 097C;  -- 	LOAD   AtanX
           131 : 117D;  -- 	STORE  AtanY
           132 : 097F;  -- 	LOAD   AtanT
           133 : 117C;  -- 	STORE  AtanX
           134 : 3939;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           135 : 813D;  -- 	CALL   A2_calc      ; else octants 6, 7
           136 : 811A;  -- 	CALL   Neg          ; Negatge the number
           137 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           138 : 8800;  -- 	RETURN
           139 : 813D;  -- 	CALL   A2_calc      ; Octants 2, 3
           13A : 811A;  -- 	CALL   Neg          ; negate the angle
           13B : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           13C : 8800;  -- 	RETURN
           13D : 097D;  -- 	LOAD   AtanY
           13E : 11DC;  -- 	STORE  d16sN        ; Y in numerator
           13F : 097C;  -- 	LOAD   AtanX
           140 : 11DD;  -- 	STORE  d16sD        ; X in denominator
           141 : 8169;  -- 	CALL   A2_div       ; divide
           142 : 09E2;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           143 : 117E;  -- 	STORE  AtanRatio
           144 : 11A5;  -- 	STORE  m16sA
           145 : 11A6;  -- 	STORE  m16sB
           146 : 8160;  -- 	CALL   A2_mult      ; X^2
           147 : 11A5;  -- 	STORE  m16sA
           148 : 0980;  -- 	LOAD   A2c
           149 : 11A6;  -- 	STORE  m16sB
           14A : 8160;  -- 	CALL   A2_mult
           14B : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           14C : 11DD;  -- 	STORE  d16sD
           14D : 097E;  -- 	LOAD   AtanRatio
           14E : 11DC;  -- 	STORE  d16sN        ; Ratio in numerator
           14F : 8169;  -- 	CALL   A2_div       ; divide
           150 : 09E2;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           151 : 11A5;  -- 	STORE  m16sA        ; <= result in radians
           152 : 0981;  -- 	LOAD   A2cd         ; degree conversion factor
           153 : 11A6;  -- 	STORE  m16sB
           154 : 8160;  -- 	CALL   A2_mult      ; convert to degrees
           155 : 117F;  -- 	STORE  AtanT
           156 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           157 : 4A50;  -- 	AND    One
           158 : 415D;  -- 	JZERO  A2_rdwn      ; round down
           159 : 097F;  -- 	LOAD   AtanT
           15A : 6018;  -- 	SHIFT  -8
           15B : 6801;  -- 	ADDI   1            ; round up
           15C : 8800;  -- 	RETURN
           15D : 097F;  -- 	LOAD   AtanT
           15E : 6018;  -- 	SHIFT  -8           ; round down
           15F : 8800;  -- 	RETURN
           160 : 8182;  -- 	CALL   Mult16s
           161 : 09AA;  -- 	LOAD   mres16sH
           162 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           163 : 11AA;  -- 	STORE  mres16sH
           164 : 09A9;  -- 	LOAD   mres16sL
           165 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           166 : 4A62;  -- 	AND    LowByte
           167 : 51AA;  -- 	OR     mres16sH     ; combine high and low words of result
           168 : 8800;  -- 	RETURN
           169 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           16A : 117F;  -- 	STORE  AtanT
           16B : 097F;  -- 	LOAD   AtanT
           16C : 6FFF;  -- 	ADDI   -1
           16D : 3970;  -- 	JPOS   A2_DN        ; not done; continue shifting
           16E : 81AB;  -- 	CALL   Div16s       ; do the standard division
           16F : 8800;  -- 	RETURN
           170 : 117F;  -- 	STORE  AtanT
           171 : 09DC;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           172 : 6001;  -- 	SHIFT  1
           173 : 59DC;  -- 	XOR    d16sN        ; if the sign changed,
           174 : 3178;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           175 : 59DC;  -- 	XOR    d16sN        ; get back shifted version
           176 : 11DC;  -- 	STORE  d16sN
           177 : 296B;  -- 	JUMP   A2_DL
           178 : 09DD;  -- 	LOAD   d16sD
           179 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           17A : 11DD;  -- 	STORE  d16sD
           17B : 296B;  -- 	JUMP   A2_DL
           17C : 0000;  -- AtanX:      DW 0
           17D : 0000;  -- AtanY:      DW 0
           17E : 0000;  -- AtanRatio:  DW 0        ; =y/x
           17F : 0000;  -- AtanT:      DW 0        ; temporary value
           180 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           181 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           182 : B800;  -- 	LOADI  0
           183 : 11A7;  -- 	STORE  m16sc        ; clear carry
           184 : 11AA;  -- 	STORE  mres16sH     ; clear result
           185 : B810;  -- 	LOADI  16           ; load 16 to counter
           186 : 11A8;  -- 	STORE  mcnt16s      
           187 : 09A7;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           188 : 418C;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           189 : 09AA;  -- 	LOAD   mres16sH     ; if a carry, 
           18A : 19A5;  -- 	ADD    m16sA        ;  add multiplicand to result H
           18B : 11AA;  -- 	STORE  mres16sH
           18C : 09A6;  -- 	LOAD   m16sB
           18D : 4A50;  -- 	AND    One          ; check bit 0 of multiplier
           18E : 11A7;  -- 	STORE  m16sc        ; save as next carry
           18F : 4193;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           190 : 09AA;  -- 	LOAD   mres16sH     ; if bit 0 set,
           191 : 21A5;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           192 : 11AA;  -- 	STORE  mres16sH
           193 : 09A6;  -- 	LOAD   m16sB
           194 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           195 : 49A4;  -- 	AND    c7FFF        ; clear msb
           196 : 11A6;  -- 	STORE  m16sB
           197 : 09AA;  -- 	LOAD   mres16sH     ; load result H
           198 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           199 : 51A6;  -- 	OR     m16sB
           19A : 11A6;  -- 	STORE  m16sB        ; result L now includes carry out from H
           19B : 09AA;  -- 	LOAD   mres16sH
           19C : 6011;  -- 	SHIFT  -1
           19D : 11AA;  -- 	STORE  mres16sH     ; shift result H >>1
           19E : 09A8;  -- 	LOAD   mcnt16s
           19F : 6FFF;  -- 	ADDI   -1           ; check counter
           1A0 : 3986;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1A1 : 09A6;  -- 	LOAD   m16sB
           1A2 : 11A9;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1A3 : 8800;  -- 	RETURN              ; Done
           1A4 : 7FFF;  -- c7FFF: DW &H7FFF
           1A5 : 0000;  -- m16sA: DW 0 ; multiplicand
           1A6 : 0000;  -- m16sB: DW 0 ; multipler
           1A7 : 0000;  -- m16sc: DW 0 ; carry
           1A8 : 0000;  -- mcnt16s: DW 0 ; counter
           1A9 : 0000;  -- mres16sL: DW 0 ; result low
           1AA : 0000;  -- mres16sH: DW 0 ; result high
           1AB : B800;  -- 	LOADI  0
           1AC : 11E3;  -- 	STORE  dres16sR     ; clear remainder result
           1AD : 11E0;  -- 	STORE  d16sC1       ; clear carry
           1AE : 09DC;  -- 	LOAD   d16sN
           1AF : 59DD;  -- 	XOR    d16sD
           1B0 : 11DE;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1B1 : B811;  -- 	LOADI  17
           1B2 : 11DF;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1B3 : 09DD;  -- 	LOAD   d16sD
           1B4 : 8119;  -- 	CALL   Abs          ; take absolute value of denominator
           1B5 : 11DD;  -- 	STORE  d16sD
           1B6 : 09DC;  -- 	LOAD   d16sN
           1B7 : 8119;  -- 	CALL   Abs          ; take absolute value of numerator
           1B8 : 11DC;  -- 	STORE  d16sN
           1B9 : 09DC;  -- 	LOAD   d16sN
           1BA : 601F;  -- 	SHIFT  -15          ; get msb
           1BB : 4A50;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1BC : 11E1;  -- 	STORE  d16sC2       ; store as carry
           1BD : 09DC;  -- 	LOAD   d16sN
           1BE : 6001;  -- 	SHIFT  1            ; shift <<1
           1BF : 51E0;  -- 	OR     d16sC1       ; with carry
           1C0 : 11DC;  -- 	STORE  d16sN
           1C1 : 09DF;  -- 	LOAD   d16sT
           1C2 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1C3 : 41D3;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1C4 : 11DF;  -- 	STORE  d16sT
           1C5 : 09E3;  -- 	LOAD   dres16sR
           1C6 : 6001;  -- 	SHIFT  1            ; shift remainder
           1C7 : 51E1;  -- 	OR     d16sC2       ; with carry from other shift
           1C8 : 21DD;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1C9 : 31CE;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1CA : 11E3;  -- 	STORE  dres16sR
           1CB : B801;  -- 	LOADI  1
           1CC : 11E0;  -- 	STORE  d16sC1       ; set carry
           1CD : 29B9;  -- 	JUMP   Div16s_loop
           1CE : 19DD;  -- 	ADD    d16sD        ; add denominator back in
           1CF : 11E3;  -- 	STORE  dres16sR
           1D0 : B800;  -- 	LOADI  0
           1D1 : 11E0;  -- 	STORE  d16sC1       ; clear carry
           1D2 : 29B9;  -- 	JUMP   Div16s_loop
           1D3 : 09DC;  -- 	LOAD   d16sN
           1D4 : 11E2;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1D5 : 09DE;  -- 	LOAD   d16sS        ; check the sign indicator
           1D6 : 31D8;  -- 	JNEG   Div16s_neg
           1D7 : 8800;  -- 	RETURN
           1D8 : 09E2;  -- 	LOAD   dres16sQ     ; need to negate the result
           1D9 : 811A;  -- 	CALL   Neg
           1DA : 11E2;  -- 	STORE  dres16sQ
           1DB : 8800;  -- 	RETURN	
           1DC : 0000;  -- d16sN: DW 0 ; numerator
           1DD : 0000;  -- d16sD: DW 0 ; denominator
           1DE : 0000;  -- d16sS: DW 0 ; sign value
           1DF : 0000;  -- d16sT: DW 0 ; temp counter
           1E0 : 0000;  -- d16sC1: DW 0 ; carry value
           1E1 : 0000;  -- d16sC2: DW 0 ; carry value
           1E2 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1E3 : 0000;  -- dres16sR: DW 0 ; remainder result
           1E4 : 0A0E;  -- 	LOAD   L2X
           1E5 : 8119;  -- 	CALL   Abs
           1E6 : 1210;  -- 	STORE  L2T1
           1E7 : 0A0F;  -- 	LOAD   L2Y
           1E8 : 8119;  -- 	CALL   Abs
           1E9 : 2210;  -- 	SUB    L2T1
           1EA : 3206;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1EB : 1A10;  -- 	ADD    L2T1
           1EC : 11A5;  -- 	STORE  m16sa
           1ED : B8F6;  -- 	LOADI  246       ; max * 246
           1EE : 11A6;  -- 	STORE  m16sB
           1EF : 8182;  -- 	CALL   Mult16s
           1F0 : 09AA;  -- 	LOAD   mres16sH
           1F1 : 6008;  -- 	SHIFT  8
           1F2 : 1211;  -- 	STORE  L2T2
           1F3 : 09A9;  -- 	LOAD   mres16sL
           1F4 : 6018;  -- 	SHIFT  -8        ; / 256
           1F5 : 4A62;  -- 	AND    LowByte
           1F6 : 5211;  -- 	OR     L2T2
           1F7 : 1212;  -- 	STORE  L2T3
           1F8 : 0A10;  -- 	LOAD   L2T1
           1F9 : 11A5;  -- 	STORE  m16sa
           1FA : B868;  -- 	LOADI  104       ; min * 104
           1FB : 11A6;  -- 	STORE  m16sB
           1FC : 8182;  -- 	CALL   Mult16s
           1FD : 09AA;  -- 	LOAD   mres16sH
           1FE : 6008;  -- 	SHIFT  8
           1FF : 1211;  -- 	STORE  L2T2
           200 : 09A9;  -- 	LOAD   mres16sL
           201 : 6018;  -- 	SHIFT  -8        ; / 256
           202 : 4A62;  -- 	AND    LowByte
           203 : 5211;  -- 	OR     L2T2
           204 : 1A12;  -- 	ADD    L2T3     ; sum
           205 : 8800;  -- 	RETURN
           206 : 1A10;  -- 	ADD    L2T1
           207 : 1211;  -- 	STORE  L2T2
           208 : 0A10;  -- 	LOAD   L2T1
           209 : 1212;  -- 	STORE  L2T3
           20A : 0A11;  -- 	LOAD   L2T2
           20B : 1210;  -- 	STORE  L2T1
           20C : 0A12;  -- 	LOAD   L2T3
           20D : 29EC;  -- 	JUMP   CalcDist
           20E : 0000;  -- L2X:  DW 0
           20F : 0000;  -- L2Y:  DW 0
           210 : 0000;  -- L2T1: DW 0
           211 : 0000;  -- L2T2: DW 0
           212 : 0000;  -- L2T3: DW 0
           213 : 9802;  -- 	OUT    TIMER
           214 : 9002;  -- 	IN     TIMER
           215 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           216 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           217 : 3214;  -- 	JNEG   Wloop
           218 : 8800;  -- 	RETURN
           219 : 8231;  -- 	CALL   GetBattLvl
           21A : 4219;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           21B : 2273;  -- 	SUB    MinBatt
           21C : 321F;  -- 	JNEG   DeadBatt
           21D : 1A73;  -- 	ADD    MinBatt     ; get original value back
           21E : 8800;  -- 	RETURN
           21F : B820;  -- 	LOADI  &H20
           220 : 980A;  -- 	OUT    BEEP        ; start beep sound
           221 : 8231;  -- 	CALL   GetBattLvl  ; get the battery level
           222 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           223 : 9805;  -- 	OUT    SSEG2
           224 : 9806;  -- 	OUT    LCD
           225 : 0A4F;  -- 	LOAD   Zero
           226 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           227 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           228 : 9807;  -- 	OUT    XLEDS
           229 : 8213;  -- 	CALL   Wait1       ; 1 second
           22A : 0A4F;  -- 	Load   Zero
           22B : 980A;  -- 	OUT    BEEP        ; stop beeping
           22C : 0A4F;  -- 	LOAD   Zero
           22D : 9801;  -- 	OUT    LEDS        ; LEDs off
           22E : 9807;  -- 	OUT    XLEDS
           22F : 8213;  -- 	CALL   Wait1       ; 1 second
           230 : 2A1F;  -- 	JUMP   DeadBatt    ; repeat forever
           231 : 0A75;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           232 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           233 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           234 : 823F;  -- 	CALL   BlockI2C    ; wait for it to finish
           235 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           236 : 8800;  -- 	RETURN
           237 : 823F;  -- 	CALL   BlockI2C    ; wait for idle
           238 : 0A74;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           239 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           23A : 0A4F;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           23B : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           23C : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           23D : 823F;  -- 	CALL   BlockI2C    ; wait for it to finish
           23E : 8800;  -- 	RETURN
           23F : 0A4F;  -- 	LOAD   Zero
           240 : 124D;  -- 	STORE  Temp        ; Used to check for timeout
           241 : 0A4D;  -- 	LOAD   Temp
           242 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           243 : 124D;  -- 	STORE  Temp
           244 : 4248;  -- 	JZERO  I2CError    ; Timeout occurred; error
           245 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           246 : 3A41;  -- 	JPOS   BI2CL       ; If not 0, try again
           247 : 8800;  -- 	RETURN             ; Else return
           248 : 0A4F;  -- 	LOAD   Zero
           249 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           24A : 9804;  -- 	OUT    SSEG1
           24B : 9805;  -- 	OUT    SSEG2       ; display error message
           24C : 2A48;  -- 	JUMP   I2CError
           24D : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           24E : FFFF;  -- NegOne:   DW -1
           24F : 0000;  -- Zero:     DW 0
           250 : 0001;  -- One:      DW 1
           251 : 0002;  -- Two:      DW 2
           252 : 0003;  -- Three:    DW 3
           253 : 0004;  -- Four:     DW 4
           254 : 0005;  -- Five:     DW 5
           255 : 0006;  -- Six:      DW 6
           256 : 0007;  -- Seven:    DW 7
           257 : 0008;  -- Eight:    DW 8
           258 : 0009;  -- Nine:     DW 9
           259 : 000A;  -- Ten:      DW 10
           25A : 0001;  -- Mask0:    DW &B00000001
           25B : 0002;  -- Mask1:    DW &B00000010
           25C : 0004;  -- Mask2:    DW &B00000100
           25D : 0008;  -- Mask3:    DW &B00001000
           25E : 0010;  -- Mask4:    DW &B00010000
           25F : 0020;  -- Mask5:    DW &B00100000
           260 : 0040;  -- Mask6:    DW &B01000000
           261 : 0080;  -- Mask7:    DW &B10000000
           262 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           263 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           264 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           265 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           266 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           267 : 0125;  -- OneFoot: DW 293			; ~1ft
           268 : 002D;  -- Deg45:	DW 45			; 45 degrees
           269 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           26A : 00B4;  -- Deg180:   DW 180       ; 180
           26B : 010E;  -- Deg270:   DW 270       ; 270
           26C : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           26D : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           26E : FF9C;  -- RSlow:    DW -100
           26F : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           270 : FEA2;  -- RMid:     DW -350
           271 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           272 : FE0C;  -- RFast:    DW -500
           273 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           274 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           275 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
